what is typescript?
its nothing just awraper around javascript
which provides more functionality to javascript
like ststic typing,compilation and OoPS
it is used as a development tool
FORMAL DEFINATION
TypeScript is a programming language and a superset 
of JavaScript that adds optional static typing and 
other features to JavaScript. It was developed by
Microsoft and released in 2012. TypeScript provides
features such as type annotations, interfaces, classes, 
and modules, which enable developers to write more
maintainable and scalable code. It also has better
tooling and IDE support than JavaScript, which can
improve productivity and catch errors early in the development process. 
TypeScript is transpiled into JavaScript, which means that it can run on any
 JavaScript runtime, such as a web browser or a Node.js server. It has become increasingly 
 popular in recent years, especially for large-scale web applications.
why we use typescript
TypeScript is a statically typed language that provides several benefits over plain 
JavaScript, including improved developer experience, better scalability, enhanced readability, and compatibility with existing 
JavaScript code. Its static typing allows for catching errors at compile-time and makes code more reliable, 
while its object-oriented features help organize code and reduce the risk of errors as applications grow. 
TypeScript's syntax for declaring object types and function signatures is also more concise, 
making code easier to read and understand. 
Finally, TypeScript's compatibility with existing JavaScript code allows for a gradual migration 
to TypeScript without requiring a complete rewrite of the codebase.
typescript set up 
first check is node installed or not 
if not install node then run
npm install -g typescript 
--------------tsc-"TypeScript Compiler."-------------
TSC is a tool that helps convert TypeScript code into JavaScript code that can be 
executed by browsers or other JavaScript environments. 
It is used by developers to compile TypeScript files (.ts) into JavaScript files (.js). 
This allows TypeScript code to be run in web browsers 
or other JavaScript runtimes. In short, TSC is a TypeScript compiler that helps convert 
TypeScript code into JavaScript code that can be executed
 by web browsers and other JavaScript environments.
to compile any ts file use
tsc hello.ts
it will comppile hello.ts into hello.js
-------------------"--noEmitOnError"---------------------
tsc only compile ts file to js but if there is error it work the same
to avoid this use tsc --noEmitOnError hello.ts
this not compile the hello.ts to hello.js if there is any kind of error
e.g 
make greet.ts

// This is an industrial-grade general-purpose greeter function:
function greet(person, date) {
  console.log(`Hello ${person}, today is ${date}!`);
}
 
greet("Brendan");
run tsc greet.ts it will console 
Expected 2 arguments, but got 1.

6   greet("Brendan")
and create greet.js
but if we use 
tsc --noEmitOnError greet 
this will console the same  and will not
create any greet.js
-----------------tools-----------------
The type-checker has information to check things 
like whether we’re accessing the right properties
 on variables and other properties. Once it has that 
 information, it can also start suggesting which 
 properties you might want to use.
try :
https://www.typescriptlang.org/play?#code/PTAEAEDsHsFECd7XgZwFAggUxQWWgCYCuANlgJKQAuWSADmgJYC2dyVoWAHnfDiqABmSZqABE3XvzEBuNAGNokFBwCGdOqAC8nHnxQoAFAEo5adXQB0AcyxVDY4GIA0QopHlVGS0Ib4BHV31jUABvNFBQfUsULEgMMEik0AA9AB80AF9TNHMNSxJGFTjDAGYABkrTIA
An editor that supports TypeScript can deliver 
“quick fixes” to automatically fix errors, 
refactorings to easily re-organize code, and 
useful navigation features for jumping to definitions 
of a variable, or finding all references to a given
 variable

-----------type annotations---------------------
-------------------types------------------
----------------Explicit Types--------------------
we can annotate by useing semi-colon // assign type to fn/val/params
let age : number = 25 // age is number
age = "25"  // error 
let name : string = "username"
let isPaid = false
-------------------some basic types----------------------
boolean: This represents a boolean value (true or false).

number: This represents a numeric value, including integers and floating-point numbers.

string: This represents a string value.
------------------undefined---------------------
undefined :- undefined is a primitive type in TypeScript that
 represents a value that is not defined
 When a variable or property is declared but not 
 initialized, its value is undefined by default.
 undefined can also be used as a return type for a 
 function that does not return a value.(we have use return as without return ts shows error)
 e.g 
 function logMessage(message: string): undefined {
  console.log(message);
  return undefined; or
}
can't do
 function logMessage(message: string): undefined {
  console.log(message);
  
}// error : A function whose declared type is neither 'void' nor 'any' must return a value.
logMessage('Hello, world!'); // Output: "Hello, world!"
-------------------null---------------------
null is a primitive type in TypeScript that represents 
the deliberate absence of any object value.
null can be assigned to a variable, property, or parameter to explicitly indicate
that it represents the absence of an object value.
null is typically used in situations where a variable, property, or parameter can 
have a value, but it may also be intentionally empty.
e.g
function logMessage(message?: string): void {
  if (message != null) { // not  empty or exits
    console.log(message);
  } else {
    console.log('No message provided.');
  }
}

logMessage('Hello, world!'); // Output: "Hello, world!"
logMessage(); // Output: "No message provided."



------------void------------------------------
void is a special type in TypeScript that represents 
the absence of any value.

When used as a function return type, it indicates 
that the function does not return any value.

Functions with a return type of void are often used 
to perform some side effects, such as logging a message
 to the console, updating the UI, or modifying a database.
e.g 
function logMessage(message: string): void {
  console.log(message);
}
void can also be used as a type annotation for variables
or properties that do not have a return value, such as
a callback function.
e.g
function performAction(callback: () => void): void {
  // Do some work here...
  callback();
}
By using void, we can indicate that a function does 
not return any value and improve the readability and 
maintainability of our code.
It is important to note that void is different from 
undefined and null, which represent specific values
 that can be assigned to variables or properties.
 ------------never----------------------------------
 never is a special type in TypeScript that represents 
 a value that never occurs.

 The never type is a powerful tool for expressing the 
 behavior of functions that do not return a value, 
 either because they throw an exception or because 
 they enter an infinite loop.While it is possible to 
 write functions that enter an infinite loop, such 
 functions are generally not useful in most real-world 
 applications, and can cause serious problems if not 
 handled correctly.
 e.g 
 function throwError(message: string): never {
  throw new Error(message);
}

-----------any--------
TypeScript also has a special type, any, that you can 
use whenever you don’t want a particular value to 
cause typechecking errors.
When a value is assigned the type any, TypeScript will
not perform any type checking or inference on that 
value, allowing it to be used in any context without 
any type errors or warnings.
let obj: any = { x: 0 };
// None of the following lines of code will throw compiler errors.
// Using `any` disables all further type checking, and it is assumed 
// you know the environment better than TypeScript.
obj.foo();
obj();
obj.bar = 100;
obj = "hello";
const n: number = obj;

When a value is of type any, you can access any 
properties of it (which will in turn be of type any), 
call it like a function, assign it to (or from) a 
value of any type, or pretty much anything else that’s 
syntactically legal
While the any type can be useful in certain cases, 
such as when working with external or dynamic data 
that cannot be fully typed, it is generally considered 
a best practice to avoid using any whenever possible.
If it is not possible to fully type a value, 

TypeScript also provides other types, such as unknown 
and never, which can be used to provide more precise 
type information and improve the type safety of our 
code.
------------------unknown-----------------------------
unknown is a type that represents a value of an 
unknown type. It is similar to any, but imposes more 
restrictions on how that value can be used.
When a value is assigned the type unknown, TypeScript 
does not know anything about the value's type or 
structure, and cannot allow it to be used in any 
context that requires a specific type or structure.
e.g
function add(a: unknown, b: unknown) {
 return a+b              // error 'a' is of type 'unknown'.'b' is of type 'unknown'.
}
While unknown is more restrictive than any, it can be 
useful in situations where we need to work with values 
of unknown types, such as when dealing with external or
 dynamic data that cannot be fully typed.
  to understand diff of any and unknown
  e.g 
  function add(a: any, b: any) {
  return a + b;
} // no error
function add(a: any, b: any) {
  return a + b;
}// error
function add(a: unknown, b: unknown) {
  if (typeof a === 'number' && typeof b === 'number') {
    return a + b;
  } else {
    throw new Error('Cannot add non-numeric values');
  }
}// no error 
----------tuple-------------------------
Tuple: This is a type that represents an array with a
fixed number of elements of specific types.
A tuple in TypeScript is a fixed-length array that can have elements of different types.
 some scenarios where we can use tuples
 Tuples can be useful in scenarios where you want to 
 enforce a specific type and number of elements in an 
 array. For example, you could use a tuple to 
 represent a 2D point with an x and y coordinate:
 let myPoint: [number, number] = [10, 20];
 function divide(dividend: number, divisor: number): [number, number] {
  let quotient = Math.floor(dividend / divisor);
  let remainder = dividend % divisor;
  return [quotient, remainder];
}

let [result, remainder] = divide(10, 3);
It's important to note that tuples should not be used 
for all scenarios, especially when you need to add or
 remove elements dynamically. For those cases, an 
 array is a better choice. Tuples are best used when 
 you need to enforce a specific type and number of 
 elements in an array.

tuple proble of .push solved 
let myTuple: readonly [number,string];
let obj= {
  num: 889,
  name:"username"
}
myTuple = Object.values(obj) as [number, string];

---------------enum-------------------------- 
Enum in TypeScript is a type that represents a set of 
named constants.
Enums are useful when you want to represent a fixed 
set of values in your code.
An enum is defined using the enum keyword followed 
by a set of constant names in curly braces.
By default, the values of the constants are assigned 
integer values starting from 0, but custom values can 
also be assigned.
You can use an enum by referring to the constant 
names instead of using literal values.
Enums can make your code more readable and 
maintainable by providing a set of named constants 
instead of using literal values throughout your code.
----------------types-end-----------------
for snippets onen typyAnnotation.ts
Type annotations in programming refer to the process of specifying the data 
type of a variable, parameter, or function return type. It is a way of explicitly 
declaring the type of data that a variable or function is expected to store or return. 
In statically typed languages like TypeScript, type annotations are required, as they
help the compiler catch errors at compile-time, before the code is executed.

For example, in TypeScript, we can define 
a variable name and specify that it will hold a 
string value by using a type annotation:

let name: string = "John";
In this example, string is the type 
annotation that specifies that the name variable
 will hold a string value.
function add(x: number, y: number): number {
  return x + y;
}
In this example, the add function takes two parameters 
x and y, both of which are specified to be of type 
number. The function returns a value that is also of 
type number. By using type annotations in this way, 
TypeScript can catch errors at compile-time, such as 
if we were to try to pass a string value to the add 
function, which would result in a type error.


----------------------type-annoptation-end-------------------------
-------------------------type annotation on array-----------------------------

---------------------downleveling--------------
the ability to rewrite code from newer versions of 
ECMAScript to older ones such as ECMAScript 3 or 
ECMAScript 5 (a.k.a. ES3 and ES5). This process of 
moving from a newer or “higher” version of ECMAScript 
down to an older or “lower” one is sometimes called
 downleveling.
 By default TypeScript targets ES3(converts code in es3)
 ----------------------"--target ECMAScript"---flag------
function greet(person, date) {
  console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}
greet("Maddison", new Date());
with tsc downleveling.ts
downleleling.js 
function greet(person, date) {
    console.log("Hello ".concat(person, ", today is ").concat(date.toDateString(), "!"));
}
greet("Maddison", new Date());
with tsc --target es6  downleveling.ts
downleveling.js
function greet(person, date) {
    console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}
greet("Maddison", new Date());

----------------- some experiments----------------------------