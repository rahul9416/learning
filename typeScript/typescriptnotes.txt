what is typescript?
its nothing just awraper around javascript
which provides more functionality to javascript
like ststic typing,compilation and OoPS
FORMAL DEFINATION
TypeScript is a programming language and a superset 
of JavaScript that adds optional static typing and 
other features to JavaScript. It was developed by
Microsoft and released in 2012. TypeScript provides
features such as type annotations, interfaces, classes, 
and modules, which enable developers to write more
maintainable and scalable code. It also has better
tooling and IDE support than JavaScript, which can
improve productivity and catch errors early in the development process. 
TypeScript is transpiled into JavaScript, which means that it can run on any
 JavaScript runtime, such as a web browser or a Node.js server. It has become increasingly 
 popular in recent years, especially for large-scale web applications.
why we use typescript
TypeScript is a statically typed language that provides several benefits over plain 
JavaScript, including improved developer experience, better scalability, enhanced readability, and compatibility with existing 
JavaScript code. Its static typing allows for catching errors at compile-time and makes code more reliable, 
while its object-oriented features help organize code and reduce the risk of errors as applications grow. 
TypeScript's syntax for declaring object types and function signatures is also more concise, 
making code easier to read and understand. 
Finally, TypeScript's compatibility with existing JavaScript code allows for a gradual migration 
to TypeScript without requiring a complete rewrite of the codebase.
typescript set up 
first check is node installed or not 
if not install node then run
npm install -g typescript 
--------------tsc-"TypeScript Compiler."-------------
TSC is a tool that helps convert TypeScript code into JavaScript code that can be 
executed by browsers or other JavaScript environments. 
It is used by developers to compile TypeScript files (.ts) into JavaScript files (.js). 
This allows TypeScript code to be run in web browsers 
or other JavaScript runtimes. In short, TSC is a TypeScript compiler that helps convert 
TypeScript code into JavaScript code that can be executed
 by web browsers and other JavaScript environments.
to compile any ts file use
tsc hello.ts
it will comppile hello.ts into hello.js
-------------------"--noEmitOnError"---------------------
tsc only compile ts file to js but if there is error it work the same
to avoid this use tsc --noEmitOnError hello.ts
this not compile the hello.ts to hello.js if there is any kind of error
e.g 
make greet.ts

// This is an industrial-grade general-purpose greeter function:
function greet(person, date) {
  console.log(`Hello ${person}, today is ${date}!`);
}
 
greet("Brendan");
run tsc greet.ts it will console 
Expected 2 arguments, but got 1.

6   greet("Brendan")
and create greet.js
but if we use 
tsc --noEmitOnError greet 
this will console the same  and will not
create any greet.js
-----------------tools-----------------
The type-checker has information to check things 
like whether we’re accessing the right properties
 on variables and other properties. Once it has that 
 information, it can also start suggesting which 
 properties you might want to use.
try :
https://www.typescriptlang.org/play?#code/PTAEAEDsHsFECd7XgZwFAggUxQWWgCYCuANlgJKQAuWSADmgJYC2dyVoWAHnfDiqABmSZqABE3XvzEBuNAGNokFBwCGdOqAC8nHnxQoAFAEo5adXQB0AcyxVDY4GIA0QopHlVGS0Ib4BHV31jUABvNFBQfUsULEgMMEik0AA9AB80AF9TNHMNSxJGFTjDAGYABkrTIA
An editor that supports TypeScript can deliver 
“quick fixes” to automatically fix errors, 
refactorings to easily re-organize code, and 
useful navigation features for jumping to definitions 
of a variable, or finding all references to a given
 variable

-----------type annotations---------------------
for snipits onen typyAnnotation.ts
Type annotations in programming refer to the process of specifying the data 
type of a variable, parameter, or function return type. It is a way of explicitly 
declaring the type of data that a variable or function is expected to store or return. 
In statically typed languages like TypeScript, type annotations are required, as they
help the compiler catch errors at compile-time, before the code is executed.

For example, in TypeScript, we can define 
a variable name and specify that it will hold a 
string value by using a type annotation:

let name: string = "John";
In this example, string is the type 
annotation that specifies that the name variable
 will hold a string value.
function add(x: number, y: number): number {
  return x + y;
}
In this example, the add function takes two parameters 
x and y, both of which are specified to be of type 
number. The function returns a value that is also of 
type number. By using type annotations in this way, 
TypeScript can catch errors at compile-time, such as 
if we were to try to pass a string value to the add 
function, which would result in a type error.
----------------Explicit Types--------------------
we can annotate by useing semi-colon 
let age : number = 25
let name : string = "username"
function add(x:number,y:number) : number{    //function():type{} this annotate return type
  return x+y
}


----------------------type-annoptation-end-------------------------
---------------------downleveling--------------
the ability to rewrite code from newer versions of 
ECMAScript to older ones such as ECMAScript 3 or 
ECMAScript 5 (a.k.a. ES3 and ES5). This process of 
moving from a newer or “higher” version of ECMAScript 
down to an older or “lower” one is sometimes called
 downleveling.
 By default TypeScript targets ES3(converts code in es3)
 ----------------------"--target ECMAScript"---flag------
function greet(person, date) {
  console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}
greet("Maddison", new Date());
with tsc downleveling.ts
downleleling.js 
function greet(person, date) {
    console.log("Hello ".concat(person, ", today is ").concat(date.toDateString(), "!"));
}
greet("Maddison", new Date());
with tsc --target es6  downleveling.ts
downleveling.js
function greet(person, date) {
    console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}
greet("Maddison", new Date());

