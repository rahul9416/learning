what is typescript?
its nothing just awraper around javascript
which provides more functionality to javascript
like ststic typing,compilation and OoPS
it is used as a development tool
FORMAL DEFINATION
TypeScript is a programming language and a superset 
of JavaScript that adds optional static typing and 
other features to JavaScript. It was developed by
Microsoft and released in 2012. TypeScript provides
features such as type annotations, interfaces, classes, 
and modules, which enable developers to write more
maintainable and scalable code. It also has better
tooling and IDE support than JavaScript, which can
improve productivity and catch errors early in the development process. 
TypeScript is transpiled into JavaScript, which means that it can run on any
 JavaScript runtime, such as a web browser or a Node.js server. It has become increasingly 
 popular in recent years, especially for large-scale web applications.
why we use typescript
TypeScript is a statically typed language that provides several benefits over plain 
JavaScript, including improved developer experience, better scalability, enhanced readability, and compatibility with existing 
JavaScript code. Its static typing allows for catching errors at compile-time and makes code more reliable, 
while its object-oriented features help organize code and reduce the risk of errors as applications grow. 
TypeScript's syntax for declaring object types and function signatures is also more concise, 
making code easier to read and understand. 
Finally, TypeScript's compatibility with existing JavaScript code allows for a gradual migration 
to TypeScript without requiring a complete rewrite of the codebase.
typescript set up 
first check is node installed or not 
if not install node then run
npm install -g typescript 
--------------tsc-"TypeScript Compiler."-------------
TSC is a tool that helps convert TypeScript code into JavaScript code that can be 
executed by browsers or other JavaScript environments. 
It is used by developers to compile TypeScript files (.ts) into JavaScript files (.js). 
This allows TypeScript code to be run in web browsers 
or other JavaScript runtimes. In short, TSC is a TypeScript compiler that helps convert 
TypeScript code into JavaScript code that can be executed
 by web browsers and other JavaScript environments.
to compile any ts file use
tsc hello.ts
it will comppile hello.ts into hello.js
-------------------"--noEmitOnError"---------------------
tsc only compile ts file to js but if there is error it work the same
to avoid this use tsc --noEmitOnError hello.ts
this not compile the hello.ts to hello.js if there is any kind of error
e.g 
make greet.ts

// This is an industrial-grade general-purpose greeter function:
function greet(person, date) {
  console.log(`Hello ${person}, today is ${date}!`);
}
 
greet("Brendan");
run tsc greet.ts it will console 
Expected 2 arguments, but got 1.

6   greet("Brendan")
and create greet.js
but if we use 
tsc --noEmitOnError greet 
this will console the same  and will not
create any greet.js
-----------------tools-----------------
The type-checker has information to check things 
like whether we’re accessing the right properties
 on variables and other properties. Once it has that 
 information, it can also start suggesting which 
 properties you might want to use.
try :
https://www.typescriptlang.org/play?#code/PTAEAEDsHsFECd7XgZwFAggUxQWWgCYCuANlgJKQAuWSADmgJYC2dyVoWAHnfDiqABmSZqABE3XvzEBuNAGNokFBwCGdOqAC8nHnxQoAFAEo5adXQB0AcyxVDY4GIA0QopHlVGS0Ib4BHV31jUABvNFBQfUsULEgMMEik0AA9AB80AF9TNHMNSxJGFTjDAGYABkrTIA
An editor that supports TypeScript can deliver 
“quick fixes” to automatically fix errors, 
refactorings to easily re-organize code, and 
useful navigation features for jumping to definitions 
of a variable, or finding all references to a given
 variable

-----------type annotations---------------------
-------------------types------------------
----------------Explicit Types--------------------
we can annotate by useing semi-colon // assign type to fn/val/params
let age : number = 25 // age is number
age = "25"  // error 
let name : string = "username"
let isPaid = false
-------------------some basic types----------------------
boolean: This represents a boolean value (true or false).

number: This represents a numeric value, including integers and floating-point numbers.

string: This represents a string value.
------------------undefined---------------------
undefined :- undefined is a primitive type in TypeScript that
 represents a value that is not defined
 When a variable or property is declared but not 
 initialized, its value is undefined by default.
 undefined can also be used as a return type for a 
 function that does not return a value.(we have use return as without return ts shows error)
 e.g 
 function logMessage(message: string): undefined {
  console.log(message);
  return undefined; or
}
can't do
 function logMessage(message: string): undefined {
  console.log(message);
  
}// error : A function whose declared type is neither 'void' nor 'any' must return a value.
logMessage('Hello, world!'); // Output: "Hello, world!"
-------------------null---------------------
null is a primitive type in TypeScript that represents 
the deliberate absence of any object value.
null can be assigned to a variable, property, or parameter to explicitly indicate
that it represents the absence of an object value.
null is typically used in situations where a variable, property, or parameter can 
have a value, but it may also be intentionally empty.
e.g
function logMessage(message?: string): void {
  if (message != null) { // not  empty or exits
    console.log(message);
  } else {
    console.log('No message provided.');
  }
}

logMessage('Hello, world!'); // Output: "Hello, world!"
logMessage(); // Output: "No message provided."



------------void------------------------------
void is a special type in TypeScript that represents 
the absence of any value.

When used as a function return type, it indicates 
that the function does not return any value.

Functions with a return type of void are often used 
to perform some side effects, such as logging a message
 to the console, updating the UI, or modifying a database.
e.g 
function logMessage(message: string): void {
  console.log(message);
}
void can also be used as a type annotation for variables
or properties that do not have a return value, such as
a callback function.
e.g
function performAction(callback: () => void): void {
  // Do some work here...
  callback();
}
By using void, we can indicate that a function does 
not return any value and improve the readability and 
maintainability of our code.
It is important to note that void is different from 
undefined and null, which represent specific values
 that can be assigned to variables or properties.
 ------------never----------------------------------
 never is a special type in TypeScript that represents 
 a value that never occurs.

 The never type is a powerful tool for expressing the 
 behavior of functions that do not return a value, 
 either because they throw an exception or because 
 they enter an infinite loop.While it is possible to 
 write functions that enter an infinite loop, such 
 functions are generally not useful in most real-world 
 applications, and can cause serious problems if not 
 handled correctly.
 e.g 
 function throwError(message: string): never {
  throw new Error(message);
}

-----------any--------
TypeScript also has a special type, any, that you can 
use whenever you don’t want a particular value to 
cause typechecking errors.
When a value is assigned the type any, TypeScript will
not perform any type checking or inference on that 
value, allowing it to be used in any context without 
any type errors or warnings.
let obj: any = { x: 0 };
// None of the following lines of code will throw compiler errors.
// Using `any` disables all further type checking, and it is assumed 
// you know the environment better than TypeScript.
obj.foo();
obj();
obj.bar = 100;
obj = "hello";
const n: number = obj;

When a value is of type any, you can access any 
properties of it (which will in turn be of type any), 
call it like a function, assign it to (or from) a 
value of any type, or pretty much anything else that’s 
syntactically legal
While the any type can be useful in certain cases, 
such as when working with external or dynamic data 
that cannot be fully typed, it is generally considered 
a best practice to avoid using any whenever possible.
If it is not possible to fully type a value, 

TypeScript also provides other types, such as unknown 
and never, which can be used to provide more precise 
type information and improve the type safety of our 
code.
------------------unknown-----------------------------
unknown is a type that represents a value of an 
unknown type. It is similar to any, but imposes more 
restrictions on how that value can be used.
When a value is assigned the type unknown, TypeScript 
does not know anything about the value's type or 
structure, and cannot allow it to be used in any 
context that requires a specific type or structure.
e.g
function add(a: unknown, b: unknown) {
 return a+b              // error 'a' is of type 'unknown'.'b' is of type 'unknown'.
}
While unknown is more restrictive than any, it can be 
useful in situations where we need to work with values 
of unknown types, such as when dealing with external or
 dynamic data that cannot be fully typed.
  to understand diff of any and unknown
  e.g 
  function add(a: any, b: any) {
  return a + b;
} // no error
function add(a: any, b: any) {
  return a + b;
}// error
function add(a: unknown, b: unknown) {
  if (typeof a === 'number' && typeof b === 'number') {
    return a + b;
  } else {
    throw new Error('Cannot add non-numeric values');
  }
}// no error 
----------tuple-------------------------
Tuple: This is a type that represents an array with a
fixed number of elements of specific types.
A tuple in TypeScript is a fixed-length array that can have elements of different types.
 some scenarios where we can use tuples
 Tuples can be useful in scenarios where you want to 
 enforce a specific type and number of elements in an 
 array. For example, you could use a tuple to 
 represent a 2D point with an x and y coordinate:
 let myPoint: [number, number] = [10, 20];
 function divide(dividend: number, divisor: number): [number, number] {
  let quotient = Math.floor(dividend / divisor);
  let remainder = dividend % divisor;
  return [quotient, remainder];
}

let [result, remainder] = divide(10, 3);
It's important to note that tuples should not be used 
for all scenarios, especially when you need to add or
 remove elements dynamically. For those cases, an 
 array is a better choice. Tuples are best used when 
 you need to enforce a specific type and number of 
 elements in an array.

tuple problem of .push solved 
let myTuple: readonly [number,string];
let obj= {
  num: 889,
  name:"username"
}
myTuple = Object.values(obj) as [number, string];

---------------enum-------------------------- 
Enum in TypeScript is a type that represents a set of 
named constants.
Enums are useful when you want to represent a fixed 
set of values in your code.
An enum is defined using the enum keyword followed 
by a set of constant names in curly braces.
By default, the values of the constants are assigned 
integer values starting from 0, but custom values can 
also be assigned.
You can use an enum by referring to the constant 
names instead of using literal values.
Enums can make your code more readable and 
maintainable by providing a set of named constants 
instead of using literal values throughout your code.
----------------types-end-----------------
for snippets onen typyAnnotation.ts
Type annotations in programming refer to the process of specifying the data 
type of a variable, parameter, or function return type. It is a way of explicitly 
declaring the type of data that a variable or function is expected to store or return. 
In statically typed languages like TypeScript, type annotations are required, as they
help the compiler catch errors at compile-time, before the code is executed.

For example, in TypeScript, we can define 
a variable name and specify that it will hold a 
string value by using a type annotation:

let name: string = "John";
In this example, string is the type 
annotation that specifies that the name variable
 will hold a string value.
function add(x: number, y: number): number {
  return x + y;
}
In this example, the add function takes two parameters 
x and y, both of which are specified to be of type 
number. The function returns a value that is also of 
type number. By using type annotations in this way, 
TypeScript can catch errors at compile-time, such as 
if we were to try to pass a string value to the add 
function, which would result in a type error.


----------------------type-annoptation-end-------------------------
-------------------------type annotation on array-----------------------------

---------------------downleveling--------------
the ability to rewrite code from newer versions of 
ECMAScript to older ones such as ECMAScript 3 or 
ECMAScript 5 (a.k.a. ES3 and ES5). This process of 
moving from a newer or “higher” version of ECMAScript 
down to an older or “lower” one is sometimes called
 downleveling.
 By default TypeScript targets ES3(converts code in es3)
 ----------------------"--target ECMAScript"---flag------
function greet(person, date) {
  console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}
greet("Maddison", new Date());
with tsc downleveling.ts
downleleling.js 
function greet(person, date) {
    console.log("Hello ".concat(person, ", today is ").concat(date.toDateString(), "!"));
}
greet("Maddison", new Date());
with tsc --target es6  downleveling.ts
downleveling.js
function greet(person, date) {
    console.log(`Hello ${person}, today is ${date.toDateString()}!`);
}
greet("Maddison", new Date());

----------------- some experiments----------------------------

------------------falsy and truthy values-----------------------------
0
NaN
"" (the empty string)
0n (the bigint version of zero)
null
undefined
are considered as falsy value 
remaining are truthy values in ts



------------------type-casting/ type assertion-----------------
In TypeScript, you can use type casting to override 
the inferred or declared type of a variable or value. 
e.g
const myValue: any = "hello world";
const strLength: number = (myValue as string).length;
console.log(strLength); // outputs 11

interface User {
    name : string;
    email:string;
    gender : "Male"|"Female"|"Trans";
}

interface UserData extends User {
    age:number;
    add : string 
}

interface Employee extends UserData {
 salary : string
}

let user:UserData = {
    name : "username",
    email:"u@u.com",
    gender: "Male",
    age:78,
    add: "delhi"

}
let tempUser = user as Employee


must read :- 
this is for above code 
The reason why the code does not show any error 
is that the tempUser variable is being explicitly 
casted to the Employee type using the as keyword. 
This tells the TypeScript compiler to assume that 
the user object has all the properties of the Employee 
type, even though it was declared as UserData.

-----------Casting with <>--------
let x: unknown = 'hello';
console.log((<string>x).length);





-------------------------type-casting/ type assertion - ends------------

-----------------type - inference-----------------------
• Inference means the act or process of
reaching a conclusion about something from
known facts.
• TypeScript can infer the type of a variable or an
array if it has values.


-------------type composition----------------------------
Type composition in TypeScript is the process of 
creating a new type by combining two or more existing 
types, either by merging their properties or by 
intersecting their properties.
 for Type Aliases we use & to combine two types 
 e.g:
 type user = {
 name : string;
 age : number
 }
 type userAdd = {
  address : string
 }
 type userDetails = user & userAdd
  for interface we use extends
  e.g
interface User {
    name : string;
    email:string;
    gender : "Male"|"Female"|"Trans";
}

interface UserData extends User {
    age:number;
    add : string 
}

---------------structural typing--------------------

When we talk about duck typing or structural typing 
we are talking about the compatibility that different 
types may or may not have in a given programming 
language.
#Understanding structural typing
The basic rule for TypeScript’s structural type
 system is that type A is compatible with type B 
 if B has at least the same members as A.
--------------structural typing end --------------------
-----------------narrowing-----------------------------------
Type narrowing is an important concept in TypeScript 
that allows a developer to narrow down the type of a 
variable or expression to a more specific type, which 
can help catch errors at compile-time and provide 
better type safety.
#type guard
Type guards: TypeScript supports type guards that 
allow you to narrow down the type of a variable 
based on its type at runtime. Type guards can be 
implemented using the typeof operator, the instanceof 
operator, or user-defined functions that return a type
 predicate.
 e.g:-
 function isString(value: unknown): value is string {
  return typeof value === 'string';
}

function foo(value: unknown) {
  if (isString(value)) {
    // value is now narrowed down to type string
  }
}
class Animal {
  name: string;
  constructor(name: string) {
    this.name = name;
  }
}

class Cat extends Animal {
  meow() {
    console.log('Meow!');
  }
}

function isCat(animal: Animal): animal is Cat {
  return animal instanceof Cat;
}

const animal: Animal = new Cat('Fluffy');

if (isCat(animal)) {
  // animal is now narrowed down to type Cat
  animal.meow();
}
 some type guards 
"string"
"number"
"bigint"
"boolean"
"symbol"
"undefined"
"object"
"function"
typeof null is also object 

#The in operator narrowing
JavaScript has an operator for determining if an 
object has a property with a name: the in operator. 
TypeScript takes this into account as a way to narrow 
down potential types.
For example, with the code: "value" in x. where 
"value" is a string literal and x is a union type. 
The “true” branch narrows x’s types which have either
 an optional or required property value, and the 
 “false” branch narrows to types which have an 
 optional or missing property value.
type Fish = { swim: () => void };
type Bird = { fly: () => void };

interface Fish { swim: () => void };// works same 
interface Bird  { fly: () => void };
 
function move(animal: Fish | Bird) {
  if ("swim" in animal) {
    return animal.swim();
  }
 
  return animal.fly();
}

------------------------narrowing end----------------- 
--------------------Control flow analysis--------------
### small but usefull concept 
function padLeft(padding: number | string, input: string) {
  if (typeof padding === "number") {
    return " ".repeat(padding) + input;
  }
  return padding + input;
}
padLeft returns from within its first if block. 
TypeScript was able to analyze this code and see 
that the rest of the body (return padding + input;) 
is unreachable in the case where padding is a number. 
As a result, it was able to remove number from the 
type of padding (narrowing from string | number to 
string) for the rest of the function.
-----------------type manipulation--------------------------
## generics
function name<Type>(param:Type):Type{
// do something
return param  
}
//if you want to return somehing instead of param just
mention type by using type assertion
e.g:-

function compute<T>(a:T,b:T):T{
    if(typeof a ==="string"&& typeof b === "string") {
        return a+b as T;
    }
    if(typeof a ==="number"&& typeof b === "number") {
        return a+b as T;
    }
    return a
  }
  using generic with more than one param and diff types 
function swap<T, U>(a: T, b: U): [U, T] {
  return [b, a];
}
## geneic interface
interface GenericIdentityFn {
  <Type>(arg: Type): Type;
}

function identity<Type>(arg: Type): Type {
  return arg;
}
 
let myIdentity: GenericIdentityFn = identity;
here we have to define the function 
let result = myIdentity<string>("Hello world");
console.log(result); // Output: "Hello world"
let result = myIdentity<number>(42);
console.log(result); // Output: 42



// keyof operator 
The keyof operator takes an object type and 
produces a string or numeric literal union of 
its keys. The following type P is the same type
 as “x” | “y”:
 type Point = { x: number; y: number };
type P = keyof Point;
it converts type of keys of a object in union type
type Arrayish = { [n: number]: unknown };
type A = keyof Arrayish;
    
type A = number
 
type Mapish = { [k: string]: boolean };
type M = keyof Mapish;
// typeof operator 
TypeScript adds a typeof operator you can use in a 
type context to refer to the type of a variable or
 property:
 let s = "hello";
let n: typeof s;


//indexing typewe 
we can use key of object to define a type 
by indexing type
type Person = { age: number; name: string; alive: boolean };
type Age = Person["age"];
type I1 = Person["age" | "name"];
     
type I1 = string | number
 
type I2 = Person[keyof Person];
     
type I2 = string | number | boolean
 
type AliveOrName = "alive" | "name";
type I3 = Person[AliveOrName];
for arrays of objects we use number to get the object type
const MyArray = [
  { name: "Alice", age: 15 },
  { name: "Bob", age: 23 },
  { name: "Eve", age: 38 },
];
type Person = typeof MyArray[number];
type Age = typeof MyArray[number]["age"];
// Or
type Age2 = Person["age"];
You can only use types when indexing, meaning you 
can’t use a const to make a variable reference:
const key = "age";
type Age = Person[key];// error Type 'key' cannot be used as an index type.
'key' refers to a value, but is being used as a type here. Did you mean 'typeof key'?

//Conditional Types

interface Animal {
  live(): void;
}
interface Dog extends Animal {
  woof(): void;
}
 
type Example1 = Dog extends Animal ? number : string;
        
//type Example1 = number
 
type Example2 = RegExp extends Animal ? number : string;
        
//type Example2 = string
Conditional types take a form that looks a little like conditional expressions (condition ? trueExpression : falseExpression) in JavaScript:
 SomeType extends OtherType ? TrueType : FalseType;

---------------type manipulation end---------------------------------
---------------------Utility type start-----------------
## Awaited<Type>
this assign the type of awaited data from a promise to a variable 
let display: Element= document.querySelector("#display")!;
type jokeData = {
    categories: string[];
    created_at: string;
    icon_url: string;
    id: string;
    updated_at: string;
    url: string;
    value: string;
}
async function getJoke():Promise<jokeData> {
const response = await fetch("https://api.chucknorris.io/jokes/random")
const data =  await response.json()
return data
}
type joke = Awaited<ReturnType<typeof getJoke>> //{w:string}
(async () =>{
    let data:joke = await getJoke()
    console.log(data)
})()


## partial<T>
here T is interface 
by partial we can make propertes optional
interface A {
x: number
y: number
}
Partial<A> = {  // new type using interface A
x?: number
y?: number
}
interface Starship {
name: string;
enableHyperjump: boolean;
}
const updateStarship = (id: number, starship: Starship)
=> {};
updateStarship (1, {
name: 'Explorer' // error as Starship have two properties 
});
if we use partial we won't get any error 
const updateStarship = id: number, starship: Partial<Starship>) => {}; 
updateStarship (1, {
name: 'Explorer' // no error as partial made all property optional
});
##Required<T> // makes optional to required 
interface A
x?: number
y?: number
}
Required<A> = {
x: number
y: number
}
##Readonly<T>
this make all the properties readonly which means we can alter or overwrite them
interface A {
x: number
y: number
}
Readonly<A> = {
readonly x: number
readonly x: number
}
##Pick<T,k>// it only keep type of properties mention in pick<interface,"key1"|"key2">
interface A {
x: number
y: number
z: number
}
Pick<A, "x" | "z"> = {
x: number
z: number
} 
## Omit<T, K>
interface A {
x: number
y: number
z: number
}
Omit<A, "x" | "z"> = {
y: number
}
##exclude type 
Exclude<T, U>
type A = string | string[] | undefined 
Exclude<A, undefined> = string | string[]// A:string|string[]
type AvailableDrinks = 'Coffee' | 'Tea' | 'Orange Juice' | 'Lemonade';
let JohnsDrink: AvailableDrinks;
JohnsDrink = 'Coffee';
type Drinks JaneDoesntLike = 'Coffee' | 'Orange Juice';
let JanesDrink: Exclude<AvailableDrinks, Drinks Jane Doesnt Like>;
JanesDrink = "Tea "
## NonNullable
interface StarshipProperties {
color?: 'blue' | 'red' | 'green';
}
function paintStarship(
id: number,
color: NonNullable<StarshipProperties ['color']>
) {}
var undefined
paintStarship(1, undefined);// error can't assign null
##ReturnType<Type>
type T0 = ReturnType<() => string>;// this function here returns string
     
type T0 = string
// @errors: 2344 2344
declare function f1(): { a: number; b: string };

type T0 = ReturnType<() => string>;
//    ^?
type T1 = ReturnType<(s: string) => void>;
//    ^?
type T2 = ReturnType<<T>() => T>;
//    ^?
type T3 = ReturnType<<T extends U, U extends number[]>() => T>;
//    ^?
type T4 = ReturnType<typeof f1>;
//    ^?
type T5 = ReturnType<any>;
//    ^?
type T6 = ReturnType<never>;
//    ^?
type T7 = ReturnType<string>;
//    ^?
type T8 = ReturnType<Function>;
//    ^?
--------------------Utility type ends-----------------

------------ques--------------------------
how to do validatiopn by type in typescript 





-------------------tip-tricks----------------------
interface User {
    email: string;
    firstName: string;
    lastName: string;
    fullName: string;
}
function getUsers(repository: Repository): User[] {
    const users = repository.findUsers();
    return users.map(x => ({ id: x.id, ...x }))
}
 this User[] means array of userobj which only can 
have object of type user


------------------keywords to know-----------------------
##implements
In TypeScript, the implements keyword is used to 
indicate that a class or object implements a 
particular interface. When a class implements an 
interface, it agrees to provide an implementation
 for all of the methods and properties defined in 
 the interface.
## declare In TypeScript, the "declare" keyword is used
 to tell the compiler that a variable or a function 
 exists, but its implementation details are not
  available in the current file. It is often used in 
  conjunction with external libraries or modules that 
  are not written in TypeScript, but still need to be 
  used in a TypeScript project.
  e.g:-
  declare var $: any;

$('#my-element').click(function() {
  console.log('Element clicked.');
});
Here, the "declare" keyword is used to tell the 
compiler that the "$" variable exists, but its 
implementation details are not available in the 
current file. The "any" type is used to indicate
 that the variable can have any type. The "$" 
 variable is used to access the jQuery library, 
 which is not written in TypeScript.
 e.g:- without declare
 var $: any;

$('#my-element').click(function() {
  console.log('Element clicked.');
});//compile-time error
//compiler will not be able to find the 
//implementation details of the "$" variable.
## public,protected and private
he default visibility of class members is public. 
A public member can be accessed anywhere:
class Greeter {
  public greet() {
    console.log("hi!");
  }
}
const g = new Greeter();
g.greet();
Because public is already the default visibility 
modifier, you don’t ever need to write it on a class
 member, but might choose to do so for
  style/readability reasons.
  protected members are only visible to subclasses of 
  the class they’re declared in.
  class Greeter {
  public greet() {
    console.log("Hello, " + this.getName());
  }
  protected getName() {
    return "hi";
  }
}
 
class SpecialGreeter extends Greeter {
  public howdy() {
    // OK to access protected member here
    console.log("Howdy, " + this.getName());
  }
}
const g = new SpecialGreeter();
g.greet(); // OK
g.getName();
//errorProperty 'getName' is protected and only accessible within class 'Greeter' and its subclasses.
private is like protected, but doesn’t allow access to 
the member even from subclasses:
class Base {
  private x = 0;
}
const b = new Base();
// Can't access from outside the class
console.log(b.x);
//error  Property 'x' is private and only accessible within class 'Base'.
This means that JavaScript runtime constructs
 like in or simple property lookup can still access
  a private or protected member:
  private also allows access using bracket notation 
  during type checking.
  This makes private-declared fields potentially 
  easier to access for things like unit tests,
   with the drawback that these fields are soft 
   private and don’t strictly enforce privacy.